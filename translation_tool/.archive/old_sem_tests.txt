    # def test_int_decl_semantics(self):
        # sem_a = Semantic_analyser()
        # par = Parser()
        # self.assertEqual(sem_a.analyse_constraints("10", "2"), False)
        # self.assertEqual(sem_a.analyse_constraints(
        #                  "999999999999999999999999999999999999999999999999999999999999"  # NOQA
        #                  "999999999999999999999999999999", "2"), False)
        # par.parse_test_unit("Int zz = 10;")
        # par.parse_test_unit("Bit yy = True;")
        # self.assertEqual(par.parse_test_unit("Int aa = 10;")[1], True)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int a = 4 * zz + (5 * (5 * zz)), kk = 5 * ( 4 / (2 *2));")[1], True)
        # self.assertEqual(par.parse_test_unit("Int j = 4 * zz + (5 * (5 * k)),  l = 5 * ( 4 / (2 * 2));"), False)
        # print(par.parse_test_unit("Int j = 4 * zz + (5 * (5 * k));")[0][0]['values'].dump())
        # self.assertEqual(par.parse_test_unit("Int a = 4 * zz + (5 * (5 * zz)), m = yy * ( 4 / (2 *2));"), False)
        # self.assertEqual(par.parse_test_unit("Int d = 10, b = 10, c = 20;")[1], True)  # NOQA
        # # self.assertEqual(par.parse_test_unit("Int(3) e = 10, f = 10, g = 20;"), False)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int(4) h = 10, h = 10, i = 20;"), False)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int(4) z = 10;")[1], True)
        # self.assertEqual(par.parse_test_unit("Int(4) z = 10;"), False)
        # self.assertEqual(par.parse_test_unit("Int(4) k;")[1], True)
        # self.assertEqual(par.parse_test_unit("Int(4) k;"), False)
        # self.assertEqual(par.parse_test_unit("Int bb = [1,2,3,4] << [4 * 4 * 3 * 4];"), False)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int cc = [1,2,3,4] << 3;"), False)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int dd = (3 << 3) + (3 << 3);")[1], True)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int ee = 4 << 3;")[1], True)  # NOQA
        # self.assertEqual(par.parse_test_unit("Int ff = (4 * 4 * 2 * 3) << 3;")[1], True)  # NOQA

    # def test_id_set_semantics(self):
    #     par = Parser()
    #     par.parse_test_unit("Int a, b, c;")
    #     self.assertEqual(par.semantic_analyser.value_is_correct_type("Int", "30"), True)
    #     self.assertEqual(par.semantic_analyser.value_is_correct_type("Int", "False"), False)
    #     self.assertEqual(par.parse_test_unit("a = b * c * ((4 + 4) - 4);")[1], True)
    #     self.assertEqual(par.parse_test_unit("a = [3,4,2,1] << 3;"), False)

    # def test_arith_expr_semantics(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_unit("Int a, b, c;")[1], True)
    #     self.assertEqual(par.parse_test_unit("e = False;"), False)
    #     self.assertEqual(par.parse_test_unit("Bit e = False;")[1], True)
    #     self.assertEqual(par.parse_test_unit("e = True;")[1], True)
    #     self.assertEqual(par.parse_test_unit("(a + 3) * b / c;")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = (a + 3) * b / c;")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = (a + 3) * b / d;"), False)
    #     self.assertEqual(par.parse_test_unit("c = (a + False) * b / d;"), False)
    #     self.assertEqual(par.parse_test_unit("c = (a + e) * b / d;"), False)

    # def test_add_to_symbol_table(self):
    #     sem_a = Semantic_analyser()
    #     sem_a.sym_table.add_int_id("global", "A", "10", "5")
    #     sem_a.sym_table.add_int_id("global", "B", id_constraints="9")
    #     sem_a.sym_table.add_int_id("global", "D", id_value="4")
    #     self.assertEqual(sem_a.sym_table.id_in("global", "A"), True)
    #     self.assertEqual(sem_a.sym_table.id_in("global", "B"), True)
    #     self.assertEqual(sem_a.sym_table.id_in("global", "C"), False)
    #     self.assertEqual(sem_a.sym_table.id_in("global", "D"), True)

    # def test_decl_bit_semantics(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_unit("Bit d, e, l = True;")[1], True)
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["d"]["type"], "Bit")
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["d"]["value"], None)
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["l"]["value"], "True")

    # def test_int_bases_semantics(self):
    #     par = Parser()
    #     par.parse_test_unit("Int a, b, c")
    #     self.assertEqual(par.parse_test_unit("a = 0b010101010;")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = 0x345;")[1], True)
    #     self.assertEqual(par.parse_test_unit("c = 0x3b;")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = 0x3D45ef3456a;")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int d = 0x3aab;")[1], True)

    # def test_conv(self):
    #     par = Parser()
    #     sem_a = Semantic_analyser()
    #     self.assertEqual(str(sem_a.convert_base("0b0010")), "2")
    #     self.assertEqual(str(sem_a.convert_base("0x000a")), "10")
    #     self.assertEqual(par.parse_test_unit("0b0010;")[0][0], "2")
    #     self.assertEqual(par.parse_test_unit("Int a = 0b0010;")[0][0]['values'][0]['set_expr'], "2")
    #     self.assertEqual(par.parse_test_unit("Int c = 0b0010, b = 0b0100;")[0][0]['values'][1]['set_expr'], "4")
    #     self.assertEqual(par.parse_test_unit("Int d = 0x000a, e = 0x000a;")[0][0]['values'][1]['set_expr'], "10")

    # def test_seq_decl_semantics(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_unit("Int[4] a;")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int[4] b = [2,3,4,5];")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int[2][3] c = [[1,2],[3,4]];")[1], True)
    #     self.assertEqual(par.semantic_analyser.sym_table.id_type("global", "a"), "Seq")
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["a"]["seq_type"], "Int")
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["a"]["seq_type"], "Int")
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["a"]["dimension"][0], "4")
    #     self.assertEqual(len(par.semantic_analyser.sym_table.table["global"]["a"]["dimension"][0]), 1)
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["c"]["dimension"][0], "2")
    #     self.assertEqual(par.semantic_analyser.sym_table.table["global"]["c"]["dimension"][1], "3")
    #     self.assertEqual(len(par.semantic_analyser.sym_table.table["global"]["c"]["dimension"]), 2)
    #     self.assertEqual(par.parse_test_unit("Int[2][2] d = [[1,2],[3,4]];")[1], True)
    #     self.assertEqual(len(par.semantic_analyser.sym_table.table["global"]["d"]["dimension"]), 2)
    #     self.assertEqual(par.parse_test_unit("Int[4] e = [[2 * 2],1,1,1];")[1], True)

    # def test_shift_op_semantics(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_unit("Int a; Int[4] b;")[1], True)
    #     self.assertEqual(par.parse_test_unit("a = a << ((4 * 5) << 5);")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = [0,0,1,0] << ((4 * 5) << 5);")[1], True)
    #     print(par.parse_test_unit("a = ([0,0,1,0] << ((4 * 5) << (5 << (6 << 7))));")[0].dump())
    #     self.assertEqual(par.parse_test_unit("a = [[0,0,1,0],[0,0,1,0]] << (4 * 5) << 5 << 6 << 7;"), False)

    # def test_type_matches_semantics(self):
    #     par = Parser()
    #     par.parse_test_unit("Int a, b; Bit c;")
    #     self.assertEqual(par.semantic_analyser.value_is_correct_type("Int", "a"), True)
    #     self.assertEqual(par.semantic_analyser.value_is_correct_type("Bit", "c"), True)

    # def test_sequence_type_check(self):
    #     par = Parser()
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Bit", ["True", "False", "True", "False"]), True)
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Bit", [["True", "False", "True", "False"],
    #                                                             ["True", "False", "True", "False"],
    #                                                             ["True", "False", "True", "False"]]), True)
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Bit", [["True", "100", "True", "False"],
    #                                                             ["True", "False", "True", "False"],
    #                                                             ["True", "False", "True", "False"]]), False)
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Int", [["10", "100", "20", "30"],
    #                                                             ["10", "100", "20", "30"],
    #                                                             ["10", "100", "20", "30"]]), True)
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Int", [["10", "100", "20", "30"],
    #                                                             ["True", "100", "True", "False"],
    #                                                             ["10", "100", "20", "30"]]), False)
    #     self.assertEqual(par.semantic_analyser.seq_correct_type("Int", [["10", "100", "20", "30"],
    #                                                             ["10", "100", "20", "30"],
    #                                                             ["10", "100", "20", "False"]]), False)
    # IR generation

    # def test_int_decl_IR(self):
    #     par = Parser()
    #     self.assertEqual(par.semantic_analyser.IR.root, None)
    #     self.assertEqual(par.parse_test_unit("Int(4) a= 10;")[1], True)  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.type, Tree.SEQ)
    #     self.assertEqual(par.semantic_analyser.IR.root.left.type, Tree.VAR_DECL)  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.left.translate(), "uint8_t a[4]={1,0,1,0};")  # NOQA
    #     self.assertEqual(par.parse_test_unit("Int(2) b=10;"), False)  # NOQA
    #     self.assertEqual(par.parse_test_unit("Int c;")[1], True)
    #     self.assertEqual(par.semantic_analyser.IR.root.right.left.translate(), "uint8_t c[10]={0,0,0,0,0,0,0,0,0,0};")  # NOQA

    # def test_multiple_int_decl_IR(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_unit("Int(4) a= 10; Int b = 5, c;")[1], True)  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.type, Tree.SEQ)
    #     self.assertEqual(par.semantic_analyser.IR.root.left.translate(), "uint8_t a[4]={1,0,1,0};")  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.right.type, Tree.SEQ)
    #     self.assertEqual(par.semantic_analyser.IR.root.right.left.translate(), "uint8_t b[10]={0,0,0,0,0,0,0,1,0,1};")  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.right.right.type, Tree.SEQ)  # NOQA
    #     self.assertEqual(par.semantic_analyser.IR.root.right.right.left.translate(), "uint8_t c[10]={0,0,0,0,0,0,0,0,0,0};")  # NOQA

    # Broken with semantic checks
    # def test_function_parsing(self):
    #     par = Parser()
    #     self.assertEqual(par.parse_test_integration("Int testFunction(Int a, Bit b, Int[63] c, Int[1][2][3] d) {\
    #         a = 100;\
    #         return a;\
    #         }")[1], True)
    #     self.assertEqual(par.parse_test_integration("Int a;"), False)

    # def test_function_id_set_semantics(self):
    #     par = Parser()
    #     par.parse_test_unit("Int a; Int[4] c;")
    #     self.assertEqual(par.parse_test_unit("a = 1;")[1], True)
    #     self.assertEqual(par.parse_test_unit("b = 1;"), False)
    #     self.assertEqual(par.parse_test_unit("c = [1,0,1,0];")[1], True)
    #     self.assertEqual(par.parse_test_unit("c = [True,0,1,0];"), False)
    #     self.assertEqual(par.parse_test_unit("c = [True,False,False,True];"), False)
    #     self.assertEqual(par.parse_test_unit("b = [True,0,1,0];"), False)
    #     self.assertEqual(par.parse_test_unit("c = [3 * 2, 1, 0, 0];")[1], True)
    #     self.assertEqual(par.parse_test_unit("[3 * 2, [1,3], 0, 0];")[1], True)
    #     self.assertEqual(par.parse_test_unit("c = function(1,2) + function2(1,1);")[1], True)
    #     par.parse_test_unit("Int b;")
    #     self.assertEqual(par.parse_test_unit("b = 1;")[1], True)
    #     par.parse_test_unit("Int[10][10] c;")
    #     self.assertEqual(par.parse_test_unit("Int[10] d = (1,2,3,4);")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int[1][2] e = ((1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2));")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int[1][2][4] f = (((1,2),(1,2),(1,2),(1,2)),((1,2),(1,2),(1,2),(1,2)));")[1], True)
    #     self.assertEqual(par.parse_test_unit("Int[1][2] g = (((1,2),(1,2),(1,2),(1,2)),((1,2),(1,2),(1,2),(1,2)));"), False)
    #     self.assertEqual(par.parse_test_unit("Int[1][2] h = ((((1,2),(1,2),(1,2),(1,2)),((1,2),(1,2),(1,2),(1,2))));"), False)
    #     self.assertEqual(par.parse_test_unit("Int[1][2][4] i = (((True,False),(True,False),(True,False),(True,False)),((True,False),(True,False),(True,False),(True,False)));"), False)  # NOQA


