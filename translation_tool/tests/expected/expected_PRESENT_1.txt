uint32_t  (*pLayer(uint32_t state[64])[64]{ 
uint8_t target_bit;
uint32_t temp[64];
temp[0] = state[0];
temp[1] = state[1];
temp[2] = state[2];
temp[3] = state[3];
temp[4] = state[4];
temp[5] = state[5];
temp[6] = state[6];
temp[7] = state[7];
temp[8] = state[8];
temp[9] = state[9];
temp[10] = state[10];
temp[11] = state[11];
temp[12] = state[12];
temp[13] = state[13];
temp[14] = state[14];
temp[15] = state[15];
temp[16] = state[16];
temp[17] = state[17];
temp[18] = state[18];
temp[19] = state[19];
temp[20] = state[20];
temp[21] = state[21];
temp[22] = state[22];
temp[23] = state[23];
temp[24] = state[24];
temp[25] = state[25];
temp[26] = state[26];
temp[27] = state[27];
temp[28] = state[28];
temp[29] = state[29];
temp[30] = state[30];
temp[31] = state[31];
temp[32] = state[32];
temp[33] = state[33];
temp[34] = state[34];
temp[35] = state[35];
temp[36] = state[36];
temp[37] = state[37];
temp[38] = state[38];
temp[39] = state[39];
temp[40] = state[40];
temp[41] = state[41];
temp[42] = state[42];
temp[43] = state[43];
temp[44] = state[44];
temp[45] = state[45];
temp[46] = state[46];
temp[47] = state[47];
temp[48] = state[48];
temp[49] = state[49];
temp[50] = state[50];
temp[51] = state[51];
temp[52] = state[52];
temp[53] = state[53];
temp[54] = state[54];
temp[55] = state[55];
temp[56] = state[56];
temp[57] = state[57];
temp[58] = state[58];
temp[59] = state[59];
temp[60] = state[60];
temp[61] = state[61];
temp[62] = state[62];
temp[63] = state[63];
uint8_t bit = 0;

for(; bit < 64; bit = bit + 1) { 
target_bit = 16 * bit % 63;
if(bit == 63) { 
target_bit = 63;

} 
state[target_bit] = temp[bit];

} 
return state;
}

