uint32_t  (*gmMult(uint32_t a[8], uint32_t b[8])[8]{ 
uint32_t g[8];
g = bitslice_assign(g, 0, 8);
uint8_t i = 0;

for(; i < 4; i = i + 1) { 
if(b[0] == True) { 
g = bitwise_bs(g, a, "^");
} 
a = shift(a, 8, 1, "<<");
if(a[3] == True) { 
a = bitwise_bs(a, bitslice(19, 8), "^");
} 
b = shift(b, 8, 1, ">>");

} 
return g;
}
uint32_t (*MixColumnSerial(uint32_t state[16][8], uint32_t MDS[16][8]))[8]{ 
uint32_t column[4][8]; 
uint8_t c = 0;

for(; c < 4; c = c + 1) { 
column[0][0] = state[c][0];
column[0][1] = state[c][1];
column[0][2] = state[c][2];
column[0][3] = state[c][3];
column[0][4] = state[c][4];
column[0][5] = state[c][5];
column[0][6] = state[c][6];
column[0][7] = state[c][7];
column[1][0] = state[c + 4][0];
column[1][1] = state[c + 4][1];
column[1][2] = state[c + 4][2];
column[1][3] = state[c + 4][3];
column[1][4] = state[c + 4][4];
column[1][5] = state[c + 4][5];
column[1][6] = state[c + 4][6];
column[1][7] = state[c + 4][7];
column[2][0] = state[c + 8][0];
column[2][1] = state[c + 8][1];
column[2][2] = state[c + 8][2];
column[2][3] = state[c + 8][3];
column[2][4] = state[c + 8][4];
column[2][5] = state[c + 8][5];
column[2][6] = state[c + 8][6];
column[2][7] = state[c + 8][7];
column[3][0] = state[c + 12][0];
column[3][1] = state[c + 12][1];
column[3][2] = state[c + 12][2];
column[3][3] = state[c + 12][3];
column[3][4] = state[c + 12][4];
column[3][5] = state[c + 12][5];
column[3][6] = state[c + 12][6];
column[3][7] = state[c + 12][7];
uint8_t r = 0;

for(; r < 4; r = r + 4) { 
state[4 * c + r] = bitwise_bs(bitwise_bs(bitwise_bs(gmMult(MDS[4 * c], column[0], gmMult(MDS[4 * c + 1], column[1], "^"), gmMult(MDS[4 * c + 2], column[2], "^"), gmMult(MDS[4 * c + 3], column[3], "^");

} 

} 
return state;
}

